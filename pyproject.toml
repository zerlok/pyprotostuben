[tool.poetry]
name = "pyprotostuben"
version = "0.3.4"
description = "Generate Python MyPy stub modules from protobuf files."
authors = ["zerlok <danil.troshnev@gmail.com>"]
readme = "README.md"
license = "MIT"
keywords = [
    "python",
    "codegen",
    "protobuf",
    "grpc",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Code Generators",
    "Typing :: Typed",
]

[tool.poetry.urls]
Homepage = "https://github.com/zerlok/pyprotostuben"
Issues = "https://github.com/zerlok/pyprotostuben/issues"

[tool.poetry.scripts]
protoc-gen-mypy-stub = "pyprotostuben.protoc:gen_mypy_stub"
protoc-gen-brokrpc = "pyprotostuben.protoc:gen_brokrpc"
protoc-gen-echo = "pyprotostuben.protoc:echo"
servicify = "pyprotostuben.codegen.servicify.cli:cli"

[tool.poetry.extras]
servicify = ["click"]

[tool.poetry.dependencies]
python = "^3.9"
protobuf = "^5.28.3"
click = {version = "^8.1.7", optional = true}

[tool.poetry.group.dev.dependencies]
types-protobuf = "^5.28.3.20241030"
mypy = "^1.13.0"
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
pytest-mypy-plugins = "^3.1.2"
ruff = ">=0.7.4,<0.9.0"
grpc-stubs = "^1.53.0.5"
BrokRPC = { version = "^0.2.0", python = ">=3.12,<4.0" }
pyyaml = "^6.0.2"
types-pyyaml = "^6.0.12.20240917"
pydantic = "^2.10.4"

[tool.poetry.group.examples.dependencies]
BrokRPC = { version = "^0.2.0", extras = ["aiormq"], python = ">=3.12,<4.0" }
fastapi = "^0.115.6"
httpx = "^0.28.1"
uvicorn = "^0.34.0"
httpx-ws = "^0.7.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
target-version = "py39"
include = ["src/**/*.py", "tests/**/*.py"]
extend-exclude = ["tests/**/expected_gen/**.py"]
force-exclude = true
line-length = 120
output-format = "pylint"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN", # because we use mypy
    "D", # TODO: add docstrings to public code
    "FA", # TODO: consider should we use __annotations__
    "TD", # no task tracking
    "FIX", # TODO: consider enable it against new code on pull requests
    "COM812", # because ruff format suggests to skip it
    "ISC001", # because ruff format suggests to skip it
    "RET505", # clashes with mypy exhaustiveness check
    "S101", # allow asserts for tests checks and mypy help
    # TODO: stop ignore this rule
    "UP007", # because of 3.9 support
    # TODO: stop ignore this rule
    "SIM117", # because ast builder 2.0 uses with statement to build contextual scope statemetns
]

[tool.ruff.lint.per-file-ignores]
# CLI is built with `click` framework
"src/pyprotostuben/codegen/servicify/cli.py" = [
    "FBT001", # CLI commands can use non keyword flag options
    "PLR0913", # CLI commands can use a lots of arguments and options
]
"tests/**" = [
    "PLR0913", # test functions can use a lots of arguments and fixtures
]

[tool.mypy]
files = ["src", "tests"]
strict = true

[[tool.mypy.overrides]]
module = ["tests.integration.cases.*.expected_gen.*"]
ignore_missing_imports = true
ignore_errors = true


[tool.pytest.ini_options]
pythonpath = [
    "src",
]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
]
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abc.abstractmethod",
    "if __name__ == .__main__.:",
    "if t.TYPE_CHECKING:",
]
show_missing = true

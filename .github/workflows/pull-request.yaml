name: Check On Pull Request

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  poetry-env:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
        python-version: [ "3.9", "3.12"]
    env:
      POETRY_CACHE_DIR: /opt/poetry-${{ matrix.python-version }}/cache
    steps:
      - uses: actions/checkout@v4
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - uses: actions/cache@v4
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: /opt/poetry-${{ matrix.python-version }}/cache
          key: poetry-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install --without=examples --all-extras
      - name: check env
        run: ls -la .poetry-${{ matrix.python-version }}
      - name: Upload poetry venv
        uses: actions/upload-artifact@v4
        with:
          path: /opt/poetry-${{ matrix.python-version }}/cache
          name: poetry-${{ matrix.python-version }}
          if-no-files-found: error

  static-checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
        python-version: [ "3.9", "3.12"]
    env:
      POETRY_CACHE_DIR: /opt/poetry-${{ matrix.python-version }}/cache
    needs: poetry-env
    steps:
      - name: Download poetry env
        uses: actions/download-artifact@v4
        with:
          path: /opt/poetry-${{ matrix.python-version }}/cache
          name: poetry-${{ matrix.python-version }}
      - name: Run mypy
        run: poetry run mypy
      - name: Run ruff check
        run: poetry run ruff check
      - name: Run ruff format
        run: poetry run ruff format --check

#  test:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      # NOTE: be careful with coverage uploads when using matrix.
#      matrix:
#        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
#        protoc-version: [ "26.1" ]
#        buf-version: [ "1.38.0" ]
#    env:
#      OS: ubuntu
#      PYTHON: ${{ matrix.python-version }}
#      PROTOC: ${{ matrix.protoc-version }}
#      BUF: ${{ matrix.buf-version }}
#    steps:
#      - uses: actions/checkout@v4
#      - name: Install Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v5
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install poetry
#        uses: abatilo/actions-poetry@v2
#      - name: Configure poetry
#        run: poetry config virtualenvs.create false
#      - name: Setup venv
#        run: |
#          python -m venv .venv-${{ matrix.python-version }}
#          . .venv-${{ matrix.python-version }}/bin/activate
#      - uses: actions/cache@v4
#        name: Define a cache for venv
#        with:
#          path: .venv-${{ matrix.python-version }}
#          key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
#      - name: check poetry env
#        run: |
#          poetry env info
#          poetry show
#      - name: Download protoc ${{ matrix.protoc-version }}
#        run: wget -q -O protoc.zip "https://github.com/protocolbuffers/protobuf/releases/download/v${{ matrix.protoc-version }}/protoc-${{ matrix.protoc-version }}-linux-x86_64.zip"
#      - name: Unzip protoc ${{ matrix.protoc-version }}
#        run: unzip -q -n protoc.zip 'bin/*' 'include/google/protobuf/*' -d .venv
#      - name: Download buf ${{ matrix.buf-version }}
#        run: wget -q -O .venv/bin/buf "https://github.com/bufbuild/buf/releases/download/v${{ matrix.buf-version }}/buf-Linux-x86_64"
#      - name: Allow run buf ${{ matrix.buf-version }}
#        run: chmod +x .venv/bin/buf
#      - name: Run pytest
#        run: poetry run pytest --cov-report=xml
#      - name: Upload results to Codecov
#        uses: codecov/codecov-action@v4
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          env_vars: OS,PYTHON,PROTOC,BUF

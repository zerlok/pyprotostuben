name: Check On Pull Request

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  static:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
    steps:
      - uses: actions/checkout@v4
      - name: Install Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
        # see details (matrix, python-version, python-version-file, etc.)
        # https://github.com/actions/setup-python
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install --without=examples --all-extras
      - name: Run mypy
        run: poetry run mypy
      - name: Run ruff check
        run: poetry run ruff check
      - name: Run ruff format
        run: poetry run ruff format --check
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # NOTE: be careful with coverage uploads when using matrix.
      matrix:
        python_version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
        protoc_version: [ "26.1" ]
        buf_version: [ "1.38.0" ]
    steps:
      - uses: actions/checkout@v4
      - name: Install Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
        # see details (matrix, python-version, python-version-file, etc.)
        # https://github.com/actions/setup-python
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install --without=examples --all-extras
      - name: Download protoc ${{ matrix.protoc_version }}
        run: wget -q -O protoc.zip "https://github.com/protocolbuffers/protobuf/releases/download/v${{ matrix.protoc_version }}/protoc-${{ matrix.protoc_version }}-linux-x86_64.zip"
      - name: Unzip protoc ${{ matrix.protoc_version }}
        run: unzip -q -n protoc.zip 'bin/*' 'include/google/protobuf/*' -d .venv
      - name: Download buf ${{ matrix.buf_version }}
        run: wget -q -O .venv/bin/buf "https://github.com/bufbuild/buf/releases/download/v${{ matrix.buf_version }}/buf-Linux-x86_64"
      - name: Allow run buf ${{ matrix.buf_version }}
        run: chmod +x .venv/bin/buf
      - name: Run pytest
        run: poetry run pytest --cov-report=xml
      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # upload coverage only on 3.12
          dry_run: '${{ matrix.python_version != '3.12' }}'

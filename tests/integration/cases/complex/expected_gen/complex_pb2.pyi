import builtins
import enum
import google.protobuf.message
import typing

class Message1(google.protobuf.message.Message):

    def __init__(self, *, f1: builtins.str, f2: builtins.str) -> None:...

    @builtins.property
    def f1(self) -> builtins.str:...

    @builtins.property
    def f2(self) -> builtins.str:...

    def HasField(self, field_name: typing.NoReturn) -> typing.NoReturn:...

    def WhichOneof(self, oneof_group: typing.NoReturn) -> typing.NoReturn:...

class Message2(google.protobuf.message.Message):

    def __init__(self, *, msg1seq: typing.Sequence[Message1]) -> None:...

    @builtins.property
    def msg1seq(self) -> typing.Sequence[Message1]:...

    def HasField(self, field_name: typing.NoReturn) -> typing.NoReturn:...

    def WhichOneof(self, oneof_group: typing.NoReturn) -> typing.NoReturn:...

class MessageOptional(google.protobuf.message.Message):

    def __init__(self, *, optmsg: typing.Optional[Message2]=None) -> None:...

    @builtins.property
    def optmsg(self) -> Message2:...

    def HasField(self, field_name: typing.Literal['optmsg']) -> bool:...

    def WhichOneof(self, oneof_group: typing.NoReturn) -> typing.NoReturn:...

class NestedRoot(google.protobuf.message.Message):

    class Nested1(google.protobuf.message.Message):

        class Nested2(google.protobuf.message.Message):

            def __init__(self, *, msg: Message1) -> None:...

            @builtins.property
            def msg(self) -> Message1:...

            def HasField(self, field_name: typing.NoReturn) -> typing.NoReturn:...

            def WhichOneof(self, oneof_group: typing.NoReturn) -> typing.NoReturn:...

        def __init__(self, *, inner2: NestedRoot.Nested1.Nested2) -> None:...

        @builtins.property
        def inner2(self) -> NestedRoot.Nested1.Nested2:...

        def HasField(self, field_name: typing.NoReturn) -> typing.NoReturn:...

        def WhichOneof(self, oneof_group: typing.NoReturn) -> typing.NoReturn:...

    def __init__(self, *, inner1: NestedRoot.Nested1) -> None:...

    @builtins.property
    def inner1(self) -> NestedRoot.Nested1:...

    def HasField(self, field_name: typing.NoReturn) -> typing.NoReturn:...

    def WhichOneof(self, oneof_group: typing.NoReturn) -> typing.NoReturn:...

class MessageWithNestedEnum(google.protobuf.message.Message):

    class Items(enum.IntEnum):
        ITEM0 = 0
        ITEM1 = 1
        ITEM2 = 2

    def __init__(self, *, item: MessageWithNestedEnum.Items) -> None:...

    @builtins.property
    def item(self) -> MessageWithNestedEnum.Items:...

    def HasField(self, field_name: typing.NoReturn) -> typing.NoReturn:...

    def WhichOneof(self, oneof_group: typing.NoReturn) -> typing.NoReturn:...

class MessageWithMultipleOneOfs(google.protobuf.message.Message):

    def __init__(self, *, v1: typing.Optional[builtins.str]=None, v2: typing.Optional[builtins.str]=None, v3: typing.Optional[builtins.str]=None, v4: typing.Optional[builtins.str]=None) -> None:...

    @builtins.property
    def v1(self) -> builtins.str:...

    @builtins.property
    def v2(self) -> builtins.str:...

    @builtins.property
    def v3(self) -> builtins.str:...

    @builtins.property
    def v4(self) -> builtins.str:...

    def HasField(self, field_name: typing.NoReturn) -> typing.NoReturn:...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['oneof1']) -> typing.Optional[typing.Literal['v1', 'v2']]:...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['oneof2']) -> typing.Optional[typing.Literal['v3', 'v4']]:...